@startuml

enum TaxiStatus {
  IN_ROUTE_TO_PICKUP
  PICKUP
  IN_ROUTE_TO_DROPOFF
  DROPOFF
  ROAMING
}

abstract class Person {
  +id: uuid
  +name: string
  +phoneNumber: string
}

class Passenger extends Person {
  +requestRide(currentLocation: Location, destination: Location): RideRequest
}

class Dispatcher extends Person {
  +assignTaxi(request: RideRequest): void
}

struct RideRequest {
  +id: uuid
  +passenger: Passenger
  +currentLocation: Location
  +destination: Location
}

struct Location {
  +name: string
  +latitude: double
  +longitude: double
}

Passenger --> RideRequest
RideRequest --> Passenger
RideRequest --> Location
Dispatcher --> RideRequest

node WebApplication {
}

class Scheduler {
  -rideRequests: std::priority_queue<RideRequest>
  -fleetState: std::priority_queue<VehicleState>
  -fleetStateTracker: FleetStateTracker
  -commander: Commander
  +addRideRequests(rideRequest: RideRequest): void
  +scheduleRideRequests(): List<RideRequest>
}

struct Route {
  +id: uuid
  +startLocation: Location
  +endLocation: Location
  +waypoints: std::vector<Location>
}

Route -> Location

class Router {
  -map: Map
  +generateRoute(startLocation: Location, endLocation: Location): Route
  +estimateTime(route: Route): int
}

Router -> Route : "Generate route"

class FleetStateTracker {
  +vehicleStates: std::unordered_map<uuid, VehicleState>
  +queryVehicleState(vehicleId: int): VehicleState
  +getLocation(vehicleId: int): Location
  +getSpeed(vehicleId: int): double
  +getOperationStage(vehicleId: int): string
}

class Dispatcher {
  +routes: Map<int, Route>
  +callRouter(startLocation: Location, endLocation: Location): Route
  +dispatchRoutes(route: Route, vehicleId: int): void
}

database Database {
'  +data: Map<string, List<Record>>
'  +readData(query: string): List<Record>
'  +writeData(record: Record): void
}

artifact Robotaxi {
}

class Vehicle {
  -vehicleState: VehicleState
  -route: Route
  +acceptRideRequest(route: Route): bool
  +executeRideRequest(): void
}

struct VehicleState {
  +id: uuid
  +curLocation: Location
  +speed: double
  +taxiStatus: TaxiStatus
}

Robotaxi --> Vehicle : has a system
Vehicle -> VehicleState

class Commander {
  -routes: <int, Route>
  +callRouter(startLocation: Location, endLocation: Location): Route
  +dispatchRoute(route: Route, vehicleId: uuid): void
}

VehicleState -> TaxiStatus
WebApplication --> Scheduler : "Send ride request/change messages"
Scheduler --> FleetStateTracker : "Read vehicle state"
FleetStateTracker --> Database : "Read/Write data"
Scheduler --> Commander : "Send/Read priority queue of ride requests"
Commander --> Router
Commander --> Robotaxi: "Send a route to Robotaxi"
FleetStateTracker --> Robotaxi : "Query vehicle state"


@enduml